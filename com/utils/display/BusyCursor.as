////////////////////////////////////////////////////////////////////////////////////// ActionScript 3.0 Common Library (MIT License)// Copyright (c) 2009 AS3CommonCode | Tony Birleffi | http://www.mosaiceye.com// // Permission is hereby granted, free of charge, to any person// obtaining a copy of this software and associated documentation// files (the "Software"), to deal in the Software without// restriction, including without limitation the rights to use,// copy, modify, merge, publish, distribute, sublicense, and/or sell// copies of the Software, and to permit persons to whom the// Software is furnished to do so, subject to the following// conditions:// // The above copyright notice and this permission notice shall be// included in all copies or substantial portions of the Software.// // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR// OTHER DEALINGS IN THE SOFTWARE.////////////////////////////////////////////////////////////////////////////////////package com.utils.display{	import flash.display.Shape;		import flash.utils.setTimeout;	import flash.utils.clearTimeout;		import flash.events.MouseEvent;		import flash.events.Event;		import flash.ui.Mouse;		import flash.display.Sprite;		/**	 * This is a basic busy cursor class.	 * 	 * @example	 * <listing>	 * BusyCursor.getInstance().init();	 * BusyCursor.getInstance().addEventListener(BusyCursor.READY, busyCursorReady, false, 0, true);	 * addChild(BusyCursor.getInstance());	 * </listing>	 * 	 * @author Tony Birleffi	 */	public class BusyCursor extends Sprite	{		/** The event name for when the busy cursor is ready. */		public static var READY:String = 'ready';				/** The instance of the busy cursor. */		private static var _instance:BusyCursor;				/** The cursor container. */		private var _cursor:Sprite;				/** The big hand container. */		private var _bigHand:Shape;				/** The small hand container. */		private var _smallHand:Shape;				/** The radius value. */		private var _radius:int = 10;				/** If the busy cursor is ready or not. */		private var _isReady:Boolean = false;				/** The timeout value. */		private var _timeOut:int = 10000;				/** The timeout unit. */		private var _timeOutUnit:uint = 0;				/** The line style color. */		private var _lineColor:uint = 0x666666;				/** The fill color. */		private var _fillColor:uint = 0xffffff;				/**		 * Constructor.		 * 		 * @param enforcer		SingletonEnforcer.		 */		public function BusyCursor(enforcer:SingletonEnforcer) {}				/**		 * Static method used to get a single instance of this class.		 * 		 * @return BusyCursor		 */		public static function getInstance():BusyCursor		{			if(BusyCursor._instance == null) BusyCursor._instance = new BusyCursor(new SingletonEnforcer());			return BusyCursor._instance;		}				/**		 * Show the busy cursor.		 */		public static function show():void		{			if(_instance._isReady)			{				// Set the timeout.				_instance._timeOutUnit = setTimeout(hide, _instance._timeOut);				_instance.addListeners();				_instance.visible = true;				_instance._cursor.visible = true;				_instance._cursor.x = _instance.mouseX;	            _instance._cursor.y = _instance.mouseY;				Mouse.hide();			}		}				/**		 * Hide the busy cursor.		 */		public static function hide():void		{			if(_instance._isReady)			{				clearTimeout(_instance._timeOutUnit);				_instance.removeListeners();				_instance._cursor.visible = false;				_instance.visible = false;				Mouse.show();			}		}				/**		 * Initialize the busy cursor.		 */		public function init():void		{			// Add the cursor sprite.			_cursor = new Sprite();			_cursor.visible = false;			addChild(_cursor);						// Draw the skin for the cursor.			drawCursor();						// Add the draw listener.			addEventListener(Event.ADDED_TO_STAGE, draw, false, 0, true);		}				/**		 * Draw the skin for the cursor.		 */		protected function drawCursor():void		{			// Shadow circle shape.			_cursor.graphics.beginFill(0, .25);			_cursor.graphics.drawCircle(0, 2, _radius);			_cursor.graphics.endFill();						// White circle shape.			_cursor.graphics.beginFill(_fillColor);			_cursor.graphics.drawCircle(0, 0, _radius);			_cursor.graphics.endFill();						// The inner circle.			_cursor.graphics.lineStyle(2, _lineColor);			_cursor.graphics.drawCircle(.25, .25, (_radius - 3));			_cursor.graphics.endFill();						// Setup the small hand.			_smallHand = new Shape();			_smallHand.graphics.lineStyle(1.5, _lineColor);			_smallHand.graphics.drawRect( 0, 0, ((_radius / 2) - 1.5), 0);			_cursor.addChild(_smallHand);						// Setup the big hand.			_bigHand = new Shape();			_bigHand.graphics.lineStyle(1.5, _lineColor);			_bigHand.graphics.drawRect( 0, 0, (_radius - 3.5), 0);			_cursor.addChild(_bigHand);		}				/**		 * Method used to draw the disabler size.		 * 		 * @param event		Event.		 */		private function draw(event:Event):void		{			// The busy cursor is now added to the stage.			_isReady = true;						// Remove the listener.			removeEventListener(Event.ADDED_TO_STAGE, draw);						// Add the disabler.			graphics.beginFill(0xff0000, 0);			graphics.drawRect(0, 0, stage.width, stage.height);			graphics.endFill();			visible = false;						// Send the ready event out.			dispatchEvent(new Event(READY));		}		/**		 * Add listeners.		 */		private function addListeners():void		{			stage.addEventListener(Event.MOUSE_LEAVE, mouseLeave, false, 0, true);			addEventListener(MouseEvent.MOUSE_MOVE, mouseMove, false, 0, true);			addEventListener(Event.ENTER_FRAME, enterFrame, false, 0, true);		}				/**		 * Remove listeners.		 */		private function removeListeners():void		{			stage.removeEventListener(Event.MOUSE_LEAVE, mouseLeave);			removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);			removeEventListener(Event.ENTER_FRAME, enterFrame);		}				/**		 * The enter frame loop.		 * 		 * @param event		Event.		 */		private function enterFrame(event:Event):void		{			_bigHand.rotation += (_radius - 3);			_smallHand.rotation += (_radius + 5);		}				/**		 * Hide the busy cursor if the mouse leaves the stage.		 */		private function mouseLeave(event:Event):void		{			mouseMove(new MouseEvent(MouseEvent.MOUSE_MOVE));		}				/**		 * When the mouse moves have the cursor follow it.		 * 		 * @param event		MouseEvent.		 */		private function mouseMove(event:MouseEvent):void		{			_cursor.x = mouseX;            _cursor.y = mouseY;            _cursor.visible = true;		}				/**		 * Get the radius value.		 * 		 * @return int.		 */		public function get radius():int		{			return _radius;		}				/**		 * Set the radius value.		 * 		 * @param value		int.		 */		public function set radius(value:int):void		{			_radius = (value < 8) ? 8 : value;		}				/**		 * Get the timeout value.		 * 		 * @return int.		 */		public function get timeout():int		{			return _timeOut;		}				/**		 * Set the timeout value.		 * 		 * @param value		int.		 */		public function set timeout(value:int):void		{			_timeOut = value;		}				/**		 * Get the fill color value.		 * 		 * @return uint.		 */		public function get fillColor():uint		{			return _fillColor;		}				/**		 * Set the fill color value.		 * 		 * @param value		int.		 */		public function set fillColor(value:uint):void		{			_fillColor = value;		}				/**		 * Get the line style color value.		 * 		 * @return uint.		 */		public function get lineColor():uint		{			return _lineColor;		}				/**		 * Set the line style color value.		 * 		 * @param value		int.		 */		public function set lineColor(value:uint):void		{			_lineColor = value;		}	}}class SingletonEnforcer {}